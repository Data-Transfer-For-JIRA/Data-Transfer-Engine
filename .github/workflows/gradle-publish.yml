# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때 실행
  release:
    types: [created]

jobs:
  build:
    runs-on: self-hosted  # 로컬에서 실행될 self-hosted runner 사용
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4 #소스 코드 체크 아웃

#    - name: Cache Gradle dependencies # Gradle 캐시 설정
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin' # JDK 설치

    - name: Build with Gradle # 프로젝트 빌드 (JAR 파일 생성)
      run: ./gradlew build

    - name: Copy JAR to WSL Ubuntu-22.04
      run: |
        scp -o StrictHostKeyChecking=no -r ./build/libs/Data-Transfer-Engine.jar root@192.168.219.143:/home/test/app/
        

      # Java 프로세스를 GitHub Actions와 독립적으로 실행
      # WSL Ubuntu에서 Docker 이미지 빌드 및 기존 컨테이너 교체
    - name: Build and Replace Docker Container on WSL
      run: |
        ssh -o StrictHostKeyChecking=no root@192.168.219.143 << 'EOF'
      # Dockerfile이 있는 경로로 이동
        cd /home/test/app/
        
        # 기존 컨테이너 중지 및 삭제
        docker stop data-transfer-engine || true  # 컨테이너가 실행 중인 경우 중지
        docker rm data-transfer-engine || true    # 기존 컨테이너 삭제

        # Docker 이미지 빌드
        docker build -t data-transfer-engine:latest .

        # 새 컨테이너 실행 (포트 8080)
        docker run -d --name data-transfer-engine -p 8888:8888 data-transfer-engine:latest
        EOF
